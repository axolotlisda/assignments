How do you register a callback?
- You pass that method either a symbol which corresponds to a method name or you could just write the callback as a block then and there. Rails will hang onto that method and call it at the appropriate time.

What events happen in an Active Record object’s lifecycle?
- Callbacks provide hooks into specific points (either before, after, or sometimes “around”) in the life cycle of an object. Those life cycle moments are:

Initialization – When the object is first built OR whenever it is reloaded from the database and into memory (so any time you find it in a query).
Validation – Whenever Rails checks if the object is valid. That could be when you’re trying to save it or if you’ve manually run the #valid? method.
Saving – The actual act of saving an already-built object to the database. This is triggered any time the object is saved, not just the first time it is created.
Creating – The creation and saving of a new object.
Updating – The updating of an existing object.
Finding – The query of existing objects (e.g., #all, #first, #find). This is often triggered by Rails working with objects behind the scenes.
You often get three choices for callbacks. Not all object lifecycle steps support all callbacks, but the basic three are (using create as an example):

before_create – Runs the method before the stated action
after_create – Runs the method after the stated action
around_create – A bit trickier. In this one, you will write a method which actually yields at some point to the original action. That way you can have code before it and after it and YOU decide at which point the original action gets done. Not entirely common.

How can you make a callback run under specific conditions?
- Callbacks give you several options for narrowing down or selecting specifically when you want them to run. If you only want to run a callback when a particular controller action calls it, use the :on option, which takes either a single symbol or a full array, e.g. before_create :run_code, :on => [:create, :update].

You can also use conditional logic options :if and :unless to try a method before running callbacks

When are transaction callbacks most useful?
- Other times your save will involve juggling several balls at once and, if one fails, they all need to be rolled back. Typically these cases will involve wrapping your database save operation in a “transaction,” which means that either all the steps work or they all fail and are rolled back.

The committing of a transaction and its potential rollback if it fails are both lifecycle events that you can latch onto with callbacks, e.g. after_commit and before_rollback. This is uncommon, so consider it another one of those “just remember that it’s an option” type things.

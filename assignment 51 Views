How do you make sure a preprocessor runs on your view file?
- That’s because, when you render your template in Rails, it first runs “preprocessors” like ERB. It knows you want to preprocess the file because it has the extension .html.erb.

What is the difference between <%, <%= and <%#?
- The difference between <% and <%= is that the <%= version actually displays whatever is returned inside the ERB tags. If you use <%, it will execute the code but, no matter what is returned by that line, it will not actually display anything in your HTML template. <%# is used to comment and will not execute.

What does including <%= yield %> in a layout do?
- Within the context of a layout, yield identifies a section where content from the view should be inserted. The simplest way to use this is to have a single yield, into which the entire contents of the view currently being rendered is inserted:

<html>
  <head>
  </head>
  <body>
  <%= yield %>
  </body>
</html>

Why do we use partials?
- Partial templates - usually just called "partials" - are another device for breaking the rendering process into more manageable chunks. With a partial, you can move the code for rendering a particular piece of a response to its own file.

What is the shortcut for rendering a collection as a series of partials?
- Partials are very useful in rendering collections. When you pass a collection to a partial via the :collection option, the partial will be inserted once for each member in the collection:

index.html.erb

<h1>Products</h1>
<%= render partial: "product", collection: @products %>
Copy
_product.html.erb

<p>Product Name: <%= product.name %></p>
Copy
When a partial is called with a pluralized collection, then the individual instances of the partial have access to the member of the collection being rendered via a variable named after the partial. In this case, the partial is _product, and within the _product partial, you can refer to product to get the instance that is being rendered.

There is also a shorthand for this. Assuming @products is a collection of Product instances, you can simply write this in the index.html.erb to produce the same result:

<h1>Products</h1>
<%= render @products %>

How do you dynamically link to another page of your Rails app?
- #link_to
link_to creates an anchor tag URL. Instead of writing:

  <a href="<%= users_path %>">See All Users</a>
You write:

  <%= link_to "See All Users", users_path %>
